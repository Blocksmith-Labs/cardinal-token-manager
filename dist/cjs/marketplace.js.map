{"version":3,"file":"marketplace.js","sourceRoot":"","sources":["../../src/marketplace.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  MasterEdition,\n  Metadata,\n} from \"@metaplex-foundation/mpl-token-metadata\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport type BN from \"bn.js\";\n\nimport { getPaymentManager } from \"./programs/paymentManager/accounts\";\nimport { findPaymentManagerAddress } from \"./programs/paymentManager/pda\";\nimport {\n  getRemainingAccountsForKind,\n  InvalidationType,\n  TokenManagerKind,\n  withRemainingAccountsForHandlePaymentWithRoyalties,\n  withRemainingAccountsForReturn,\n} from \"./programs/tokenManager\";\nimport { getTokenManager } from \"./programs/tokenManager/accounts\";\nimport { claim } from \"./programs/tokenManager/instruction\";\nimport {\n  findTokenManagerAddress,\n  findTransferReceiptId,\n} from \"./programs/tokenManager/pda\";\nimport { WSOL_MINT } from \"./programs/transferAuthority\";\nimport {\n  getListing,\n  getMarketplace,\n  getMarketplaceByName,\n} from \"./programs/transferAuthority/accounts\";\nimport {\n  acceptListing,\n  acceptTransfer,\n  cancelTransfer,\n  createListing,\n  initMarketplace,\n  initTransfer,\n  initTransferAuthority,\n  release,\n  removeListing,\n  updateListing,\n  updateMarketplace,\n  updateTransferAuthority,\n  whitelistMarkeplaces,\n} from \"./programs/transferAuthority/instruction\";\nimport {\n  findListingAddress,\n  findMarketplaceAddress,\n  findTransferAddress,\n  findTransferAuthorityAddress,\n} from \"./programs/transferAuthority/pda\";\nimport { withIssueToken } from \"./transaction\";\nimport {\n  emptyWallet,\n  findAta,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"./utils\";\nimport { withWrapSol } from \"./wrappedSol\";\n\nexport const withWrapToken = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  transferAuthorityInfo?: {\n    transferAuthorityName: string;\n    setInvalidator?: boolean;\n  },\n  payer = wallet.publicKey\n): Promise<[Transaction, PublicKey]> => {\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const checkTokenManager = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (checkTokenManager?.parsed) {\n    throw \"Token is already wrapped\";\n  }\n  const issuerTokenAccountId = await findAta(mintId, wallet.publicKey, true);\n  let kind = TokenManagerKind.Edition;\n  const masterEditionId = await MasterEdition.getPDA(mintId);\n  const accountInfo = await connection.getAccountInfo(masterEditionId);\n  if (!accountInfo) kind = TokenManagerKind.Permissioned;\n\n  await withIssueToken(\n    transaction,\n    connection,\n    wallet,\n    {\n      mint: mintId,\n      invalidationType: InvalidationType.Release,\n      issuerTokenAccountId: issuerTokenAccountId,\n      kind: kind,\n      transferAuthorityInfo: transferAuthorityInfo\n        ? {\n            transferAuthorityName: transferAuthorityInfo.transferAuthorityName,\n            setInvalidator: transferAuthorityInfo.setInvalidator ?? true,\n          }\n        : undefined,\n    },\n    payer\n  );\n\n  const tokenManagerTokenAccountId = await findAta(\n    mintId,\n    tokenManagerId,\n    true\n  );\n  const recipientTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    wallet.publicKey,\n    payer,\n    true\n  );\n\n  transaction.add(\n    await claim(\n      connection,\n      wallet,\n      tokenManagerId,\n      kind,\n      mintId,\n      tokenManagerTokenAccountId,\n      recipientTokenAccountId,\n      undefined\n    )\n  );\n\n  return [transaction, tokenManagerId];\n};\n\nexport const withInitTransferAuthority = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  authority = wallet.publicKey,\n  payer = wallet.publicKey,\n  allowedMarketplaces?: PublicKey[]\n): Promise<[Transaction, PublicKey]> => {\n  const [transferAuthority] = await findTransferAuthorityAddress(name);\n  transaction.add(\n    initTransferAuthority(\n      connection,\n      wallet,\n      name,\n      transferAuthority,\n      authority,\n      payer,\n      allowedMarketplaces\n    )\n  );\n  return [transaction, transferAuthority];\n};\n\nexport const withUpdateTransferAuthority = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  authority: PublicKey,\n  allowedMarketplaces?: PublicKey[] | null\n): Promise<Transaction> => {\n  const [transferAuthorityId] = await findTransferAuthorityAddress(name);\n  transaction.add(\n    updateTransferAuthority(\n      connection,\n      wallet,\n      transferAuthorityId,\n      authority,\n      allowedMarketplaces\n    )\n  );\n  return transaction;\n};\n\nexport const withInitMarketplace = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  transferAuthorityName: string,\n  paymentManagerName: string,\n  paymentMints?: PublicKey[],\n  payer = wallet.publicKey\n): Promise<[Transaction, PublicKey]> => {\n  const [transferAuthority] = await findTransferAuthorityAddress(\n    transferAuthorityName\n  );\n  const [marketplaceId] = await findMarketplaceAddress(name);\n  const [paymentManagerId] = await findPaymentManagerAddress(\n    paymentManagerName\n  );\n  transaction.add(\n    initMarketplace(\n      connection,\n      wallet,\n      name,\n      marketplaceId,\n      transferAuthority,\n      paymentManagerId,\n      paymentMints,\n      payer\n    )\n  );\n  return [transaction, marketplaceId];\n};\n\nexport const withUpdateMarketplace = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  transferAuthorityName: string,\n  paymentManagerName: string,\n  authority: PublicKey,\n  paymentMints: PublicKey[]\n): Promise<Transaction> => {\n  const [transferAuthority] = await findTransferAuthorityAddress(\n    transferAuthorityName\n  );\n  const [marketplaceId] = await findMarketplaceAddress(name);\n  const [paymentManagerId] = await findPaymentManagerAddress(\n    paymentManagerName\n  );\n  transaction.add(\n    updateMarketplace(\n      connection,\n      wallet,\n      marketplaceId,\n      transferAuthority,\n      paymentManagerId,\n      authority,\n      paymentMints.length !== 0 ? paymentMints : undefined\n    )\n  );\n  return transaction;\n};\n\nexport const withCreateListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  markeptlaceName: string,\n  paymentAmount: BN,\n  paymentMint = WSOL_MINT,\n  payer = wallet.publicKey\n): Promise<[Transaction, PublicKey]> => {\n  const [listingId] = await findListingAddress(mintId);\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const listerTokenAccountId = await findAta(mintId, wallet.publicKey, true);\n  const [marketplaceId] = await findMarketplaceAddress(markeptlaceName);\n  const markeptlaceData = await tryGetAccount(() =>\n    getMarketplaceByName(connection, markeptlaceName)\n  );\n  if (!markeptlaceData?.parsed) {\n    throw `No marketplace with name ${markeptlaceName} found`;\n  }\n\n  transaction.add(\n    await createListing(\n      connection,\n      wallet,\n      listingId,\n      mintId,\n      markeptlaceData.parsed.transferAuthority,\n      tokenManagerId,\n      marketplaceId,\n      listerTokenAccountId,\n      paymentAmount,\n      paymentMint,\n      payer\n    )\n  );\n  return [transaction, marketplaceId];\n};\n\nexport const withUpdateListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  paymentAmount: BN,\n  paymentMint: PublicKey\n): Promise<Transaction> => {\n  const listingData = await tryGetAccount(() => getListing(connection, mintId));\n  if (!listingData?.parsed) {\n    throw `No listing found for mint address ${mintId.toString()}`;\n  }\n\n  const [listingId] = await findListingAddress(mintId);\n  transaction.add(\n    updateListing(\n      connection,\n      wallet,\n      listingId,\n      listingData.parsed.marketplace,\n      paymentAmount,\n      paymentMint\n    )\n  );\n  return transaction;\n};\n\nexport const withRemoveListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  listingTokenAccountId: PublicKey\n): Promise<Transaction> => {\n  const [listingId] = await findListingAddress(mintId);\n\n  transaction.add(\n    await removeListing(\n      connection,\n      wallet,\n      listingId,\n      mintId,\n      listingTokenAccountId\n    )\n  );\n  return transaction;\n};\n\nexport const withAcceptListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  buyer: PublicKey,\n  mintId: PublicKey\n): Promise<Transaction> => {\n  const listingData = await tryGetAccount(() => getListing(connection, mintId));\n  if (!listingData?.parsed) {\n    throw `No listing found with mint id ${mintId.toString()}`;\n  }\n  const marketplaceData = await tryGetAccount(() =>\n    getMarketplace(connection, listingData.parsed.marketplace)\n  );\n  if (!marketplaceData?.parsed) {\n    throw `No marketplace found with id ${mintId.toString()}`;\n  }\n  const paymentManagerData = await tryGetAccount(() =>\n    getPaymentManager(connection, marketplaceData.parsed.paymentManager)\n  );\n  if (!paymentManagerData?.parsed) {\n    throw `No payment manager found for marketplace with name ${marketplaceData.parsed.name}`;\n  }\n\n  const listerPaymentTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      listingData.parsed.paymentMint,\n      listingData.parsed.lister,\n      wallet.publicKey\n    );\n\n  const listerMintTokenAccountId = await findAta(\n    mintId,\n    listingData.parsed.lister,\n    true\n  );\n\n  const buyerPaymentTokenAccountId =\n    listingData.parsed.lister.toString() === buyer.toString()\n      ? await findAta(listingData.parsed.paymentMint, buyer, true)\n      : await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          listingData.parsed.paymentMint,\n          buyer,\n          wallet.publicKey\n        );\n\n  if (listingData.parsed.paymentMint.toString() === WSOL_MINT.toString()) {\n    await withWrapSol(\n      transaction,\n      connection,\n      emptyWallet(buyer),\n      listingData.parsed.paymentAmount.toNumber(),\n      true\n    );\n  }\n\n  const buyerMintTokenAccountId =\n    listingData.parsed.lister.toString() === buyer.toString()\n      ? await findAta(mintId, buyer, true)\n      : await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          mintId,\n          buyer,\n          wallet.publicKey\n        );\n\n  const feeCollectorTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    listingData.parsed.paymentMint,\n    paymentManagerData?.parsed.feeCollector,\n    wallet.publicKey\n  );\n\n  const mintMetadataId = await Metadata.getPDA(mintId);\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const [transferReceiptId] = await findTransferReceiptId(tokenManagerId);\n  const [transferId] = await findTransferAddress(mintId);\n\n  const remainingAccountsForHandlePaymentWithRoyalties =\n    await withRemainingAccountsForHandlePaymentWithRoyalties(\n      transaction,\n      connection,\n      wallet,\n      mintId,\n      listingData.parsed.paymentMint,\n      [listingData.parsed.lister.toString(), buyer.toString()]\n    );\n\n  const tokenManagerData = await getTokenManager(connection, tokenManagerId);\n  if (!tokenManagerData) {\n    throw `No token manager found for ${mintId.toString()}`;\n  }\n  const remainingAccountsForKind = await getRemainingAccountsForKind(\n    mintId,\n    tokenManagerData.parsed.kind\n  );\n  const remainingAccounts: AccountMeta[] = [\n    ...remainingAccountsForHandlePaymentWithRoyalties,\n    ...remainingAccountsForKind,\n  ];\n\n  transaction.add(\n    acceptListing(\n      connection,\n      wallet,\n      marketplaceData.parsed.transferAuthority,\n      listerPaymentTokenAccountId,\n      listerMintTokenAccountId,\n      listingData.parsed.lister,\n      buyerPaymentTokenAccountId,\n      buyerMintTokenAccountId,\n      buyer,\n      marketplaceData.pubkey,\n      mintId,\n      listingData.pubkey,\n      tokenManagerId,\n      mintMetadataId,\n      transferReceiptId,\n      transferId,\n      marketplaceData.parsed.paymentManager,\n      listingData.parsed.paymentMint,\n      feeCollectorTokenAccountId,\n      remainingAccounts\n    )\n  );\n\n  return transaction;\n};\n\nexport const withWhitelistMarektplaces = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  transferAuthorityName: string,\n  marketplaceNames: string[]\n): Promise<Transaction> => {\n  const [transferAuthority] = await findTransferAuthorityAddress(\n    transferAuthorityName\n  );\n\n  const marketplaceIds = (\n    await Promise.all(\n      marketplaceNames.map((name) => findMarketplaceAddress(name))\n    )\n  ).map((el) => el[0]);\n  transaction.add(\n    whitelistMarkeplaces(connection, wallet, transferAuthority, marketplaceIds)\n  );\n  return transaction;\n};\n\nexport const withInitTransfer = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  to: PublicKey,\n  mintId: PublicKey,\n  holderTokenAccountId: PublicKey,\n  payer = wallet.publicKey\n): Promise<Transaction> => {\n  const [transferId] = await findTransferAddress(mintId);\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  transaction.add(\n    initTransfer(connection, wallet, {\n      to: to,\n      transferId: transferId,\n      tokenManagerId: tokenManagerId,\n      holderTokenAccountId: holderTokenAccountId,\n      holder: wallet.publicKey,\n      payer: payer,\n    })\n  );\n  return transaction;\n};\n\nexport const withCancelTransfer = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> => {\n  const [transferId] = await findTransferAddress(mintId);\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const checkTokenManager = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!checkTokenManager) {\n    throw `No token manager found for mint id ${mintId.toString()}`;\n  }\n  transaction.add(\n    cancelTransfer(connection, wallet, {\n      transferId: transferId,\n      tokenManagerId: tokenManagerId,\n      holderTokenAccountId: checkTokenManager.parsed.recipientTokenAccount,\n      holder: wallet.publicKey,\n    })\n  );\n  return transaction;\n};\n\nexport const withAcceptTransfer = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  recipient: PublicKey,\n  holder: PublicKey\n): Promise<Transaction> => {\n  const [transferId] = await findTransferAddress(mintId);\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const [transferReceiptId] = await findTransferReceiptId(tokenManagerId);\n  const [listingId] = await findListingAddress(mintId);\n  const tokenManagerData = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!tokenManagerData) {\n    throw `No token manager found for mint ${mintId.toString()}`;\n  }\n  if (!tokenManagerData.parsed.transferAuthority) {\n    throw `No transfer autority found for mint id ${mintId.toString()}`;\n  }\n  const recipientTokenAccountId = await findAta(mintId, recipient, true);\n  const remainingAccountsForTransfer = [\n    ...(await getRemainingAccountsForKind(\n      mintId,\n      tokenManagerData.parsed.kind\n    )),\n    {\n      pubkey: transferReceiptId,\n      isSigner: false,\n      isWritable: true,\n    },\n  ];\n  transaction.add(\n    acceptTransfer(connection, wallet, {\n      transferId: transferId,\n      tokenManagerId: tokenManagerId,\n      holderTokenAccountId: tokenManagerData.parsed.recipientTokenAccount,\n      holder: holder,\n      recipient: recipient,\n      recipientTokenAccountId: recipientTokenAccountId,\n      mintId: mintId,\n      transferReceiptId: transferReceiptId,\n      listingId: listingId,\n      transferAuthorityId: tokenManagerData.parsed.transferAuthority,\n      remainingAccounts: remainingAccountsForTransfer,\n    })\n  );\n  return transaction;\n};\n\nexport const withRelease = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  transferAuthorityId: PublicKey,\n  holderTokenAccountId: PublicKey,\n  payer = wallet.publicKey\n): Promise<Transaction> => {\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const checkTokenManager = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!checkTokenManager) {\n    throw `No token manager found for mint id ${mintId.toString()}`;\n  }\n  const tokenManagerTokenAccount = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    tokenManagerId,\n    payer,\n    true\n  );\n  const tokenManagerData = await getTokenManager(connection, tokenManagerId);\n  const remainingAccountsForKind = await getRemainingAccountsForKind(\n    mintId,\n    tokenManagerData.parsed.kind\n  );\n  const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n    transaction,\n    connection,\n    wallet,\n    tokenManagerData\n  );\n  transaction.add(\n    release(connection, wallet, {\n      transferAuthorityId: transferAuthorityId,\n      tokenManagerId: tokenManagerId,\n      mintId: mintId,\n      tokenManagerTokenAccountId: tokenManagerTokenAccount,\n      holderTokenAccountId: holderTokenAccountId,\n      holder: wallet.publicKey,\n      remainingAccounts: [\n        ...remainingAccountsForKind,\n        ...remainingAccountsForReturn,\n      ],\n    })\n  );\n  return transaction;\n};\n"]}