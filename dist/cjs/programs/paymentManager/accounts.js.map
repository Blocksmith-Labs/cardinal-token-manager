{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/paymentManager/accounts.ts"],"names":[],"mappings":";;;AAAA,kDAI+B;AAC/B,4DAAuD;AAEvD,6CAA0C;AAI1C,wBAAiE;AAE1D,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,gBAA2B,EACe,EAAE;IAC5C,MAAM,QAAQ,GAAG,IAAI,uBAAc,CACjC,UAAU,EACV,IAAI,6BAAY,CAAC,iBAAO,CAAC,QAAQ,EAAE,CAAC,EACpC,EAAE,CACH,CAAC;IACF,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,sBAAmB,EACnB,0BAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CACrE,gBAAgB,CACjB,CAAC;IACF,OAAO;QACL,MAAM;QACN,MAAM,EAAE,gBAAgB;KACzB,CAAC;AACJ,CAAC,CAAC;AAtBW,QAAA,iBAAiB,qBAsB5B;AAEK,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsB,EACtB,iBAA8B,EACc,EAAE;IAC9C,MAAM,QAAQ,GAAG,IAAI,uBAAc,CACjC,UAAU,EACV,IAAI,6BAAY,CAAC,iBAAO,CAAC,QAAQ,EAAE,CAAC,EACpC,EAAE,CACH,CAAC;IACF,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,sBAAmB,EACnB,0BAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,IAAI,eAAe,GAAkC,EAAE,CAAC;IACxD,IAAI;QACF,eAAe;YACb,CAAC,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,CAC/D,iBAAiB,CAClB,CAAkC,CAAC;KACvC;IAAC,OAAO,CAAC,EAAE;QACV,EAAE;KACH;IAED,OAAO,eAAe,CAAC,MAAM,CAC3B,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CACb,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EACpE,EAAuC,CACxC,CAAC;AACJ,CAAC,CAAC;AA9BW,QAAA,kBAAkB,sBA8B7B;AAEK,MAAM,qBAAqB,GAAG,KAAK,EACxC,UAAsB,EACsB,EAAE;IAC9C,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACzD,0BAAuB,CACxB,CAAC;IAEF,MAAM,eAAe,GAAsC,EAAE,CAAC;IAC9D,MAAM,KAAK,GAAG,IAAI,2BAAkB,CAAC,sBAAmB,CAAC,CAAC;IAC1D,eAAe,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAClC,IAAI;YACF,MAAM,kBAAkB,GAAuB,KAAK,CAAC,MAAM,CACzD,gBAAgB,EAChB,OAAO,CAAC,OAAO,CAAC,IAAI,CACrB,CAAC;YACF,eAAe,CAAC,IAAI,CAAC;gBACnB,GAAG,OAAO;gBACV,MAAM,EAAE,kBAAkB;aAC3B,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,EAAE;SACH;IACH,CAAC,CAAC,CAAC;IACH,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAxBW,QAAA,qBAAqB,yBAwBhC","sourcesContent":["import {\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n} from \"@project-serum/anchor\";\nimport { SignerWallet } from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\n\nimport type { AccountData } from \"../../utils\";\nimport type { PAYMENT_MANAGER_PROGRAM, PaymentManagerData } from \".\";\nimport { PAYMENT_MANAGER_ADDRESS, PAYMENT_MANAGER_IDL } from \".\";\n\nexport const getPaymentManager = async (\n  connection: Connection,\n  paymentManagerId: PublicKey\n): Promise<AccountData<PaymentManagerData>> => {\n  const provider = new AnchorProvider(\n    connection,\n    new SignerWallet(Keypair.generate()),\n    {}\n  );\n  const paymentManagerProgram = new Program<PAYMENT_MANAGER_PROGRAM>(\n    PAYMENT_MANAGER_IDL,\n    PAYMENT_MANAGER_ADDRESS,\n    provider\n  );\n\n  const parsed = await paymentManagerProgram.account.paymentManager.fetch(\n    paymentManagerId\n  );\n  return {\n    parsed,\n    pubkey: paymentManagerId,\n  };\n};\n\nexport const getPaymentManagers = async (\n  connection: Connection,\n  paymentManagerIds: PublicKey[]\n): Promise<AccountData<PaymentManagerData>[]> => {\n  const provider = new AnchorProvider(\n    connection,\n    new SignerWallet(Keypair.generate()),\n    {}\n  );\n  const paymentManagerProgram = new Program<PAYMENT_MANAGER_PROGRAM>(\n    PAYMENT_MANAGER_IDL,\n    PAYMENT_MANAGER_ADDRESS,\n    provider\n  );\n\n  let paymentManagers: (PaymentManagerData | null)[] = [];\n  try {\n    paymentManagers =\n      (await paymentManagerProgram.account.paymentManager.fetchMultiple(\n        paymentManagerIds\n      )) as (PaymentManagerData | null)[];\n  } catch (e) {\n    //\n  }\n\n  return paymentManagers.reduce(\n    (acc, tm, i) =>\n      tm ? [...acc, { parsed: tm, pubkey: paymentManagerIds[i]! }] : acc,\n    [] as AccountData<PaymentManagerData>[]\n  );\n};\n\nexport const getAllPaymentManagers = async (\n  connection: Connection\n): Promise<AccountData<PaymentManagerData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    PAYMENT_MANAGER_ADDRESS\n  );\n\n  const paymentManagers: AccountData<PaymentManagerData>[] = [];\n  const coder = new BorshAccountsCoder(PAYMENT_MANAGER_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const paymentManagerData: PaymentManagerData = coder.decode(\n        \"paymentManager\",\n        account.account.data\n      );\n      paymentManagers.push({\n        ...account,\n        parsed: paymentManagerData,\n      });\n    } catch (e) {\n      //\n    }\n  });\n  return paymentManagers;\n};\n"]}