{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/timeInvalidator/accounts.ts"],"names":[],"mappings":";;;AAAA,kDAK+B;AAC/B,4DAAuD;AAEvD,6CAA0C;AAO1C,2CAA6E;AAEtE,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsB,EACtB,iBAA4B,EACe,EAAE;IAC7C,MAAM,QAAQ,GAAG,IAAI,uBAAc,CACjC,UAAU,EACV,IAAI,6BAAY,CAAC,iBAAO,CAAC,QAAQ,EAAE,CAAC,EACpC,EAAE,CACH,CAAC;IACF,MAAM,sBAAsB,GAAG,IAAI,gBAAO,CACxC,gCAAoB,EACpB,oCAAwB,EACxB,QAAQ,CACT,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,sBAAsB,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CACvE,iBAAiB,CAClB,CAAC;IACF,OAAO;QACL,MAAM;QACN,MAAM,EAAE,iBAAiB;KAC1B,CAAC;AACJ,CAAC,CAAC;AAtBW,QAAA,kBAAkB,sBAsB7B;AAEK,MAAM,mBAAmB,GAAG,KAAK,EACtC,UAAsB,EACtB,kBAA+B,EACc,EAAE;IAC/C,MAAM,QAAQ,GAAG,IAAI,uBAAc,CACjC,UAAU,EACV,IAAI,6BAAY,CAAC,iBAAO,CAAC,QAAQ,EAAE,CAAC,EACpC,EAAE,CACH,CAAC;IACF,MAAM,sBAAsB,GAAG,IAAI,gBAAO,CACxC,gCAAoB,EACpB,oCAAwB,EACxB,QAAQ,CACT,CAAC;IAEF,IAAI,gBAAgB,GAAmC,EAAE,CAAC;IAC1D,IAAI;QACF,gBAAgB;YACd,CAAC,MAAM,sBAAsB,CAAC,OAAO,CAAC,eAAe,CAAC,aAAa,CACjE,kBAAkB,CACnB,CAAmC,CAAC;KACxC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;IACD,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACxC,MAAM,EAAE,IAAK;QACb,MAAM,EAAE,kBAAkB,CAAC,CAAC,CAAE;KAC/B,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AA5BW,QAAA,mBAAmB,uBA4B9B;AAEK,MAAM,0BAA0B,GAAG,KAAK,EAC7C,UAAsB,EACuB,EAAE;IAC/C,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACzD,oCAAwB,CACzB,CAAC;IAEF,MAAM,uBAAuB,GAAuC,EAAE,CAAC;IACvE,MAAM,KAAK,GAAG,IAAI,2BAAkB,CAAC,gCAAoB,CAAC,CAAC;IAC3D,eAAe,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;;QAClC,IAAI;YACF,MAAM,mBAAmB,GAAwB,KAAK,CAAC,MAAM,CAC3D,iBAAiB,EACjB,OAAO,CAAC,OAAO,CAAC,IAAI,CACrB,CAAC;YACF,IAAI,MAAA,mBAAmB,CAAC,UAAU,0CAAE,GAAG,CAAC,IAAI,WAAE,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,EAAE;gBAClE,uBAAuB,CAAC,IAAI,CAAC;oBAC3B,GAAG,OAAO;oBACV,MAAM,EAAE,mBAAmB;iBAC5B,CAAC,CAAC;aACJ;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;SACvD;IACH,CAAC,CAAC,CAAC;IACH,OAAO,uBAAuB,CAAC;AACjC,CAAC,CAAC;AA1BW,QAAA,0BAA0B,8BA0BrC;AAEK,MAAM,sBAAsB,GAAG,KAAK,EACzC,UAAsB,EACuB,EAAE;IAC/C,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACzD,oCAAwB,CACzB,CAAC;IAEF,MAAM,uBAAuB,GAAuC,EAAE,CAAC;IACvE,MAAM,KAAK,GAAG,IAAI,2BAAkB,CAAC,gCAAoB,CAAC,CAAC;IAC3D,eAAe,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAClC,IAAI;YACF,MAAM,mBAAmB,GAAwB,KAAK,CAAC,MAAM,CAC3D,iBAAiB,EACjB,OAAO,CAAC,OAAO,CAAC,IAAI,CACrB,CAAC;YACF,uBAAuB,CAAC,IAAI,CAAC;gBAC3B,GAAG,OAAO;gBACV,MAAM,EAAE,mBAAmB;aAC5B,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;SACvD;IACH,CAAC,CAAC,CAAC;IACH,OAAO,uBAAuB,CAAC;AACjC,CAAC,CAAC;AAxBW,QAAA,sBAAsB,0BAwBjC","sourcesContent":["import {\n  AnchorProvider,\n  BN,\n  BorshAccountsCoder,\n  Program,\n} from \"@project-serum/anchor\";\nimport { SignerWallet } from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\n\nimport type { AccountData } from \"../../utils\";\nimport type {\n  TIME_INVALIDATOR_PROGRAM,\n  TimeInvalidatorData,\n} from \"./constants\";\nimport { TIME_INVALIDATOR_ADDRESS, TIME_INVALIDATOR_IDL } from \"./constants\";\n\nexport const getTimeInvalidator = async (\n  connection: Connection,\n  timeInvalidatorId: PublicKey\n): Promise<AccountData<TimeInvalidatorData>> => {\n  const provider = new AnchorProvider(\n    connection,\n    new SignerWallet(Keypair.generate()),\n    {}\n  );\n  const timeInvalidatorProgram = new Program<TIME_INVALIDATOR_PROGRAM>(\n    TIME_INVALIDATOR_IDL,\n    TIME_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const parsed = await timeInvalidatorProgram.account.timeInvalidator.fetch(\n    timeInvalidatorId\n  );\n  return {\n    parsed,\n    pubkey: timeInvalidatorId,\n  };\n};\n\nexport const getTimeInvalidators = async (\n  connection: Connection,\n  timeInvalidatorIds: PublicKey[]\n): Promise<AccountData<TimeInvalidatorData>[]> => {\n  const provider = new AnchorProvider(\n    connection,\n    new SignerWallet(Keypair.generate()),\n    {}\n  );\n  const timeInvalidatorProgram = new Program<TIME_INVALIDATOR_PROGRAM>(\n    TIME_INVALIDATOR_IDL,\n    TIME_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  let timeInvalidators: (TimeInvalidatorData | null)[] = [];\n  try {\n    timeInvalidators =\n      (await timeInvalidatorProgram.account.timeInvalidator.fetchMultiple(\n        timeInvalidatorIds\n      )) as (TimeInvalidatorData | null)[];\n  } catch (e) {\n    console.log(e);\n  }\n  return timeInvalidators.map((data, i) => ({\n    parsed: data!,\n    pubkey: timeInvalidatorIds[i]!,\n  }));\n};\n\nexport const getExpiredTimeInvalidators = async (\n  connection: Connection\n): Promise<AccountData<TimeInvalidatorData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TIME_INVALIDATOR_ADDRESS\n  );\n\n  const expiredTimeInvalidators: AccountData<TimeInvalidatorData>[] = [];\n  const coder = new BorshAccountsCoder(TIME_INVALIDATOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const timeInvalidatorData: TimeInvalidatorData = coder.decode(\n        \"timeInvalidator\",\n        account.account.data\n      );\n      if (timeInvalidatorData.expiration?.lte(new BN(Date.now() / 1000))) {\n        expiredTimeInvalidators.push({\n          ...account,\n          parsed: timeInvalidatorData,\n        });\n      }\n    } catch (e) {\n      console.log(`Failed to decode time invalidator data`);\n    }\n  });\n  return expiredTimeInvalidators;\n};\n\nexport const getAllTimeInvalidators = async (\n  connection: Connection\n): Promise<AccountData<TimeInvalidatorData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TIME_INVALIDATOR_ADDRESS\n  );\n\n  const expiredTimeInvalidators: AccountData<TimeInvalidatorData>[] = [];\n  const coder = new BorshAccountsCoder(TIME_INVALIDATOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const timeInvalidatorData: TimeInvalidatorData = coder.decode(\n        \"timeInvalidator\",\n        account.account.data\n      );\n      expiredTimeInvalidators.push({\n        ...account,\n        parsed: timeInvalidatorData,\n      });\n    } catch (e) {\n      console.log(`Failed to decode time invalidator data`);\n    }\n  });\n  return expiredTimeInvalidators;\n};\n"]}