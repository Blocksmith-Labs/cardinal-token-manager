{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/transferAuthority/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BN } from \"@project-serum/anchor\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\n\nimport { PAYMENT_MANAGER_ADDRESS } from \"../paymentManager\";\nimport { TOKEN_MANAGER_ADDRESS } from \"../tokenManager\";\nimport {\n  findMintManagerId,\n  findTokenManagerAddress,\n} from \"../tokenManager/pda\";\nimport type { TRANSFER_AUTHORITY_PROGRAM } from \"./constants\";\nimport {\n  TRANSFER_AUTHORITY_ADDRESS,\n  TRANSFER_AUTHORITY_IDL,\n} from \"./constants\";\n\nexport const initTransferAuthority = (\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  transferAuthorityId: PublicKey,\n  authorityId: PublicKey,\n  payer = wallet.publicKey,\n  allowedMarketplaces?: PublicKey[]\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.initTransferAuthority(\n    {\n      name: name,\n      authority: authorityId,\n      allowedMarketplaces: allowedMarketplaces || null,\n    },\n    {\n      accounts: {\n        transferAuthority: transferAuthorityId,\n        payer: payer,\n        systemProgram: SystemProgram.programId,\n      },\n    }\n  );\n};\n\nexport const updateTransferAuthority = (\n  connection: Connection,\n  wallet: Wallet,\n  transferAuthorityId: PublicKey,\n  authority: PublicKey,\n  allowedMarketplaces?: PublicKey[] | null\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.updateTransferAuthority(\n    {\n      authority: authority,\n      allowedMarketplaces: allowedMarketplaces ?? null,\n    },\n    {\n      accounts: {\n        transferAuthority: transferAuthorityId,\n        authority: wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const initMarketplace = (\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  marketplaceId: PublicKey,\n  transferAuthority: PublicKey,\n  paymentManager: PublicKey,\n  paymentMints: PublicKey[] | undefined,\n  payer = wallet.publicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.initMarketplace(\n    {\n      name: name,\n      paymentManager: paymentManager,\n      authority: provider.wallet.publicKey,\n      paymentMints: paymentMints || null,\n      transferAuthority: transferAuthority,\n    },\n    {\n      accounts: {\n        marketplace: marketplaceId,\n        payer: payer,\n        systemProgram: SystemProgram.programId,\n      },\n    }\n  );\n};\n\nexport const updateMarketplace = (\n  connection: Connection,\n  wallet: Wallet,\n  marketplace: PublicKey,\n  transferAuthority: PublicKey,\n  paymentManager: PublicKey,\n  authority: PublicKey,\n  paymentMints: PublicKey[] | undefined\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.updateMarketplace(\n    {\n      transferAuthority: transferAuthority,\n      paymentManager: paymentManager,\n      authority: authority,\n      paymentMints: paymentMints ?? null,\n    },\n    {\n      accounts: {\n        marketplace: marketplace,\n        authority: provider.wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const createListing = async (\n  connection: Connection,\n  wallet: Wallet,\n  listingId: PublicKey,\n  mintId: PublicKey,\n  transferAuthorityId: PublicKey,\n  tokenManagerId: PublicKey,\n  marketplaceId: PublicKey,\n  listerTokenAccount: PublicKey,\n  paymentAmount: BN,\n  paymentMint: PublicKey,\n  payer = wallet.publicKey\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n  const [mintManagerId] = await findMintManagerId(mintId);\n\n  return transferAuthorityProgram.instruction.createListing(\n    {\n      paymentAmount: paymentAmount,\n      paymentMint: paymentMint,\n    },\n    {\n      accounts: {\n        listing: listingId,\n        tokenManager: tokenManagerId,\n        transferAuthority: transferAuthorityId,\n        marketplace: marketplaceId,\n        listerTokenAccount: listerTokenAccount,\n        lister: wallet.publicKey,\n        mint: mintId,\n        mintManager: mintManagerId,\n        payer: payer,\n        cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n    }\n  );\n};\n\nexport const updateListing = (\n  connection: Connection,\n  wallet: Wallet,\n  listingId: PublicKey,\n  marketplaceId: PublicKey,\n  paymentAmount: BN,\n  paymentMint: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.updateListing(\n    {\n      marketplace: marketplaceId,\n      paymentAmount: paymentAmount,\n      paymentMint: paymentMint,\n    },\n    {\n      accounts: {\n        listing: listingId,\n        lister: wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const removeListing = async (\n  connection: Connection,\n  wallet: Wallet,\n  listingId: PublicKey,\n  mintId: PublicKey,\n  listerTokenAccountId: PublicKey\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const [mintManagerId] = await findMintManagerId(mintId);\n  return transferAuthorityProgram.instruction.removeListing({\n    accounts: {\n      listing: listingId,\n      lister: wallet.publicKey,\n      mint: mintId,\n      mintManager: mintManagerId,\n      tokenManager: tokenManagerId,\n      listerTokenAccount: listerTokenAccountId,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n  });\n};\n\nexport const acceptListing = (\n  connection: Connection,\n  wallet: Wallet,\n  transferAuthorityId: PublicKey,\n  listerPaymentTokenAccountId: PublicKey,\n  listerMintTokenAccountId: PublicKey,\n  lister: PublicKey,\n  buyerPaymentTokenAccountId: PublicKey,\n  buyerMintTokenAccountId: PublicKey,\n  buyer: PublicKey,\n  marketplaceId: PublicKey,\n  mintId: PublicKey,\n  listingId: PublicKey,\n  tokenManagerId: PublicKey,\n  mintMetadataId: PublicKey,\n  transferReceiptId: PublicKey,\n  transferId: PublicKey,\n  paymentManagerId: PublicKey,\n  paymentMintId: PublicKey,\n  feeCollectorTokenAccountId: PublicKey,\n  remainingAccounts: AccountMeta[],\n  payer = wallet.publicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n  return transferAuthorityProgram.instruction.acceptListing({\n    accounts: {\n      transferAuthority: transferAuthorityId,\n      transferReceipt: transferReceiptId,\n      transfer: transferId,\n      listing: listingId,\n      listerPaymentTokenAccount: listerPaymentTokenAccountId,\n      listerMintTokenAccount: listerMintTokenAccountId,\n      lister: lister,\n      buyerPaymentTokenAccount: buyerPaymentTokenAccountId,\n      buyerMintTokenAccount: buyerMintTokenAccountId,\n      buyer: buyer,\n      marketplace: marketplaceId,\n      tokenManager: tokenManagerId,\n      mint: mintId,\n      mintMetadataInfo: mintMetadataId,\n      paymentManager: paymentManagerId,\n      paymentMint: paymentMintId,\n      feeCollectorTokenAccount: feeCollectorTokenAccountId,\n      payer: payer,\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n    },\n    remainingAccounts: remainingAccounts,\n  });\n};\n\nexport const whitelistMarkeplaces = (\n  connection: Connection,\n  wallet: Wallet,\n  transferAuthorityId: PublicKey,\n  whitelistMarketplaces: PublicKey[]\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.whitelistMarketplaces(\n    { allowedMarketplaces: whitelistMarketplaces },\n    {\n      accounts: {\n        transferAuthority: transferAuthorityId,\n        authority: wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const initTransfer = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    to: PublicKey;\n    transferId: PublicKey;\n    tokenManagerId: PublicKey;\n    holderTokenAccountId: PublicKey;\n    holder: PublicKey;\n    payer?: PublicKey;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n  return transferAuthorityProgram.instruction.initTransfer(\n    { to: params.to },\n    {\n      accounts: {\n        transfer: params.transferId,\n        tokenManager: params.tokenManagerId,\n        holderTokenAccount: params.holderTokenAccountId,\n        holder: params.holder,\n        payer: params.payer || wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    }\n  );\n};\n\nexport const cancelTransfer = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    transferId: PublicKey;\n    tokenManagerId: PublicKey;\n    holderTokenAccountId: PublicKey;\n    holder: PublicKey;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.cancelTransfer({\n    accounts: {\n      transfer: params.transferId,\n      tokenManager: params.tokenManagerId,\n      holderTokenAccount: params.holderTokenAccountId,\n      holder: params.holder,\n    },\n  });\n};\n\nexport const acceptTransfer = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    transferId: PublicKey;\n    tokenManagerId: PublicKey;\n    holderTokenAccountId: PublicKey;\n    holder: PublicKey;\n    recipient: PublicKey;\n    recipientTokenAccountId: PublicKey;\n    mintId: PublicKey;\n    transferReceiptId: PublicKey;\n    listingId: PublicKey;\n    transferAuthorityId: PublicKey;\n    remainingAccounts: AccountMeta[];\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.acceptTransfer({\n    accounts: {\n      transfer: params.transferId,\n      transferAuthority: params.transferAuthorityId,\n      transferReceipt: params.transferReceiptId,\n      listing: params.listingId,\n      tokenManager: params.tokenManagerId,\n      mint: params.mintId,\n      recipientTokenAccount: params.recipientTokenAccountId,\n      recipient: params.recipient,\n      payer: params.recipient,\n      holderTokenAccount: params.holderTokenAccountId,\n      holder: params.holder,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n    },\n    remainingAccounts: params.remainingAccounts,\n  });\n};\n\nexport const release = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    transferAuthorityId: PublicKey;\n    tokenManagerId: PublicKey;\n    mintId: PublicKey;\n    tokenManagerTokenAccountId: PublicKey;\n    holderTokenAccountId: PublicKey;\n    holder: PublicKey;\n    remainingAccounts: AccountMeta[];\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const transferAuthorityProgram = new Program<TRANSFER_AUTHORITY_PROGRAM>(\n    TRANSFER_AUTHORITY_IDL,\n    TRANSFER_AUTHORITY_ADDRESS,\n    provider\n  );\n\n  return transferAuthorityProgram.instruction.release({\n    accounts: {\n      transferAuthority: params.transferAuthorityId,\n      tokenManager: params.tokenManagerId,\n      mint: params.mintId,\n      tokenManagerTokenAccount: params.tokenManagerTokenAccountId,\n      holderTokenAccount: params.holderTokenAccountId,\n      holder: params.holder,\n      collector: params.holder,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: params.remainingAccounts,\n  });\n};\n"]}