{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/useInvalidator/accounts.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAEvD,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAI1C,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAE3E,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,gBAA2B,EACe,EAAE;IAC5C,MAAM,QAAQ,GAAG,IAAI,cAAc,CACjC,UAAU,EACV,IAAI,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,EACpC,EAAE,CACH,CAAC;IACF,MAAM,qBAAqB,GAAG,IAAI,OAAO,CACvC,mBAAmB,EACnB,uBAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CACrE,gBAAgB,CACjB,CAAC;IACF,OAAO;QACL,MAAM;QACN,MAAM,EAAE,gBAAgB;KACzB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsB,EACtB,iBAA8B,EACc,EAAE;IAC9C,MAAM,QAAQ,GAAG,IAAI,cAAc,CACjC,UAAU,EACV,IAAI,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,EACpC,EAAE,CACH,CAAC;IACF,MAAM,qBAAqB,GAAG,IAAI,OAAO,CACvC,mBAAmB,EACnB,uBAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,IAAI,eAAe,GAAkC,EAAE,CAAC;IACxD,IAAI;QACF,eAAe;YACb,CAAC,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,CAC/D,iBAAiB,CAClB,CAAkC,CAAC;KACvC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;IACD,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACrC,MAAM,EAAE,EAAG;QACX,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAE;KAC9B,CAAC,CAAC,CAAC;AACN,CAAC,CAAC","sourcesContent":["import { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport { SignerWallet } from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\n\nimport type { AccountData } from \"../../utils\";\nimport type { USE_INVALIDATOR_PROGRAM, UseInvalidatorData } from \"./constants\";\nimport { USE_INVALIDATOR_ADDRESS, USE_INVALIDATOR_IDL } from \"./constants\";\n\nexport const getUseInvalidator = async (\n  connection: Connection,\n  useInvalidatorId: PublicKey\n): Promise<AccountData<UseInvalidatorData>> => {\n  const provider = new AnchorProvider(\n    connection,\n    new SignerWallet(Keypair.generate()),\n    {}\n  );\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const parsed = await useInvalidatorProgram.account.useInvalidator.fetch(\n    useInvalidatorId\n  );\n  return {\n    parsed,\n    pubkey: useInvalidatorId,\n  };\n};\n\nexport const getUseInvalidators = async (\n  connection: Connection,\n  useInvalidatorIds: PublicKey[]\n): Promise<AccountData<UseInvalidatorData>[]> => {\n  const provider = new AnchorProvider(\n    connection,\n    new SignerWallet(Keypair.generate()),\n    {}\n  );\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  let useInvalidators: (UseInvalidatorData | null)[] = [];\n  try {\n    useInvalidators =\n      (await useInvalidatorProgram.account.useInvalidator.fetchMultiple(\n        useInvalidatorIds\n      )) as (UseInvalidatorData | null)[];\n  } catch (e) {\n    console.log(e);\n  }\n  return useInvalidators.map((tm, i) => ({\n    parsed: tm!,\n    pubkey: useInvalidatorIds[i]!,\n  }));\n};\n"]}